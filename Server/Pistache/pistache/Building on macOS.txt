# SPDX-FileCopyrightText: 2024 Duncan Greatwood
#
# SPDX-License-Identifier: Apache-2.0

Pistache on macOS
=================

Apple's clang compiler must be installed. It comes as part of
Xcode. If not already installed, at terminal command line do:
  xcode-select --install

Homebrew (also known as "brew") is required. If not already installed,
follow the Homebrew instructions to install:
  In your browser: https://brew.sh/

The simplest way to install Pistache on macOS is to use brew. For the
latest version of Pistache, do:
  brew install --HEAD pistache
For the most recent officially designated release, do:
  brew install pistache
We normally suggest using the most recent ("HEAD") Pistache version.
In case of difficultly, please see later Troubleshooting note.


Building Pistache from Source on macOS
======================================

If you prefer not to install with brew, Pistache can be built from
source.

Install the necessary brew packages via terminal command line:
  brew install meson
  brew install doxygen
  brew install googletest (skip this if installing with gcc - see later)
  brew install openssl
  brew install rapidjson
  brew install howard-hinnant-date
  brew install libevent
  brew install brotli
  brew install zstd
(You may be able to skip howard-hinnant-date)

Convenience shell scripts are provided to make the build. At terminal,
do:
  bldscripts/mesbuild.sh
To test:
  bldscripts/mestest.sh
To install:
  bldscripts/mesinstall.sh

See later section for more details on teh conveinence scripts.


Troubleshooting brew install on Intel Macs
------------------------------------------

On some Intel-based MACs, when installing Pistache with brew you may
see errors like:
    ==> meson setup build ...
    Traceback (most recent call last):
      File "/usr/local/opt/meson/bin/meson", line 5, in <module>
        from mesonbuild.mesonmain import main
    ModuleNotFoundError: No module named 'mesonbuild'
    ...
    Error: Testing requires the latest version of pistache

This a problem installing Python3, a dependency of meson. We found it
could be fixed by:
  sudo mkdir /usr/local/Frameworks
  sudo chown <your-user-name> /usr/local/Frameworks
  (Substituting your own macOS username for <your-user-name>)
NB: This applies solely to Intel-based Macs. Homebrew uses a different
location for files on Apple-silicon("M")/Arm-based MACs.


Building with GCC
-----------------

By default, Pistache on macOS builds with clang, which is the default
Apple compiler. If you prefer to use gcc, you can utilize the
gccmacsetup.sh script provided by Pistache before doing the build,
like this:
  source bldscripts/gccmacsetup.sh
  bldscripts/mesbuild.sh
  bldscripts/mestest.sh
  bldscripts/mesinstall.sh


Convenience Scripts
-------------------

The following scripts cna be used in any environment except
Windows. The meaning of each convenience script is as follows:
  mesbuild.sh - build release version
  mestest.sh - test release version
  mesinstall.sh - install release version

  mesbuilddebug.sh - build debug version
  mestestdebug.sh - test debug version with meson
  mesinstalldebug.sh - install debug version

Linux-only scripts. Note - all environments except Linux use libevent
by default. libevent is optional on Linux:
  mesbuildflibev.sh - build version forcing libevent use
  mestestflibev.sh - test version with libevent use
  mesinstallflibev.sh - install version with libevent use

  mesbuildflibevdebug.sh - build debug version forcing libevent use
  mestestflibevdebug.sh - test debug version with libevent use
  mesinstallflibevdebug.sh - install debug version with libevent use

Also:
  clean.sh - remove build directories
  gccmacsetup.sh - configure for GCC build on macOS


Building with GCC
-----------------

By default, Pistache on macOS builds with clang, which is the default
Apple compiler. If you prefer to use gcc, you can utilize the
gccmacsetup.sh script provided by Pistache before doing the build,
like this:
  source bldscripts/gccmacsetup.sh
  bldscripts/mesbuild.sh
  bldscripts/mestest.sh
  bldscripts/mesinstall.sh
